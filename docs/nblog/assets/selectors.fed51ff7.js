export default'<h2 id="css选择器和优先级">css选择器和优先级</h2>\n<h3 id="一些选择器：">一些选择器：</h3>\n<ul>\n<li>直接子代选择器 <code>ul &gt; li</code>, ul下面<strong>一层</strong>的li</li>\n<li>一般兄弟选择器 <code>ul ~ p</code>, ul后面同层级的所有p</li>\n<li>紧邻兄弟选择器 <code>h2 + p</code>, h2后面紧跟着的p</li>\n<li>属性选择器 <code>[data-id]</code><ul>\n<li><code>[attr~=value]</code> 属性值以空格符分开后至少有一个是value</li>\n<li><code>[attr|=value]</code> 属性值以<code>value</code>或者<code>value-</code>为前缀</li>\n<li><code>[attr^=value]</code> 属性值以<code>value</code>为开头</li>\n<li><code>[attr$=value]</code> 属性值以<code>value</code>为结尾</li>\n<li><code>[attr*=value]</code> 属性值包含value即可</li>\n<li><code>[attr operator value i]</code>, <code>[attr operator value s]</code> 加上<code>value i</code>(或s)表示属性值<strong>不区分</strong>大小写和<strong>区分</strong>大小写</li>\n</ul>\n</li>\n</ul>\n<h3 id="优先级">优先级</h3>\n<ul>\n<li>内联样式</li>\n<li>ID选择器</li>\n<li>类，属性，伪类选择器</li>\n<li>标签，伪元素选择器\n以上选择器优先级从高到低</li>\n<li>通用选择器(*)</li>\n<li>层次选择器( ,&gt;,~,+)</li>\n<li><code>:not()</code>伪类选择器\n以上选择器对优先级没有影响</li>\n</ul>\n<p>优先级的计算与元素在dom树中的距离无关：</p>\n<pre><code class="language-css">body h1 {\n  color: green;\n}\nhtml h1 {\n  color: purple;\n}\n</code></pre>\n<p>h1是紫色，优先级相同就按照顺序覆盖</p>\n<hr>\n<p>下面列举一些常用的伪类和伪元素:</p>\n<h3 id="伪元素mdn">伪元素(<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements">mdn</a>)</h3>\n<p>伪元素表示可以渲染到界面但无法在html中描述的“元素”，通常作为现有元素的特定部分</p>\n<ul>\n<li><code>::after</code>, <code>::before</code>, <code>::first-line</code>, <code>::first-letter</code>, <code>::selection</code>, <code>::placeholder</code></li>\n</ul>\n<h3 id="伪类mdn">伪类(<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">mdn</a>)</h3>\n<p>伪类描述一些具有特定结构、状态或者行为的元素</p>\n<ul>\n<li><code>:root</code> 代表html元素，但比html标签选择器的优先级高一些</li>\n<li>表单相关<ul>\n<li><code>:checked</code> 通常用于单选复选框，下拉框等，可以不借助js实现tab效果</li>\n<li><code>:disabled</code>, <code>:enabled</code>; <code>:required</code>, <code>:optional</code>; <code>:read-only</code>, <code>:read-write</code>; <code>:in-range</code>, <code>:out-of-range</code>; <code>:valid</code>, <code>:invalid</code>; <code>:default</code>...</li>\n</ul>\n</li>\n<li>结构性伪类<ul>\n<li><code>:first-child</code>, <code>:last-child</code>; <code>:first-of-type</code>,<code>:last-of-type</code>; <code>:nth-child()</code>, <code>:nth-last-child()</code>; <code>:nth-of-type()</code>, <code>:nth-last-of-type()</code></li>\n<li><code>:only-child</code>, <code>:only-of-type</code> 代表元素的唯一子元素，与<code>:first-child:last-child</code>含义上相同 </li>\n<li><code>:empty</code> 表示不包含子元素的元素（注释不算子元素但空白字符算），可以用它来展示加载前的样式</li>\n</ul>\n</li>\n<li>状态相关<ul>\n<li><code>:focus</code>, <code>:active</code>, <code>:visited</code></li>\n<li><code>:link</code> 表示未访问过的链接，遵循下面的顺序:link — :visited — :hover — :active，<code>:any-link</code>表示所有带链接的元素</li>\n<li><code>:focus-within</code>，匹配包含焦点元素的元素</li>\n</ul>\n</li>\n<li><code>:is()</code>，参数为一组选择器，然后会遍历这些选择器让其每一个都生效，与此类似的是<code>:where()</code>.<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:is">mdn</a></li>\n<li><code>:target</code> 匹配和当前路由哈希（#）对的上的那个元素</li>\n<li><code>:not()</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:not">mdn</a>，反向匹配，匹配不是某选择器的元素</li>\n</ul>\n';
