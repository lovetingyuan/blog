export default'<h3 id="vue的响应式原理">Vue的响应式原理</h3>\n<p>Vue的响应式实现在<code>src/core/observer</code>下面</p>\n<p>响应式的建立依靠的是<code>Observer</code>, <code>Dep</code>, <code>Watcher</code>以及订阅发布模式，其中<code>Observer</code>通过<code>getter/setter</code>实现了数据的拦截，\n<code>Dep</code>作为publisher，<code>Watcher</code>作为subscriber</p>\n<p>Vue的每个响应式对象包括数组都有<code>__ob__</code>的属性，这就是<code>Observer</code></p>\n<h3 id="observer">Observer</h3>\n<p><code>Observer</code>实际上就是对对象和数组进行响应式代理</p>\n<ul>\n<li>对于对象就对每个属性调用<code>defineReactive</code>执行实际的getter/setter劫持</li>\n<li>对于数组，Vue会更改数组的<code>__proto__</code>指向以实现对方法的覆盖，并依次代理数组项中的对象和数组</li>\n<li>生成的<code>Observer</code>对象会被挂载到响应式对象的<code>__ob__</code>属性上</li>\n<li>每个<code>Observer</code>对象都会有一个<code>Dep</code>对象，用来保存依赖于自己的一系列<code>Watcher</code></li>\n</ul>\n<h3 id="dep">Dep</h3>\n<p><code>Dep</code>就是发布变化的对象，它有一个id标识并且维护一个<code>Watcher</code>列表<code>subs</code></p>\n<ul>\n<li>可以添加或者删除某个<code>Watcher</code></li>\n<li>可以通知所有的<code>Watcher</code>执行自己对应的<code>update</code>方法</li>\n</ul>\n<h3 id="definereactive">defineReactive</h3>\n<p><code>defineReactive</code>每次调用都会生成一个<code>Dep</code>对象，表示当前属性可能作为的依赖</p>\n<ul>\n<li>当getter被劫持后，每当取数据的时候，<code>Dep</code>对象就会从某个地方(<code>Dep.target</code>)把数据索取方(<code>Watcher</code>)加入到自己的<code>subs</code>列表中</li>\n<li>如果当前的属性也是个对象，那么会observe这个对象，生成<code>ChildOb</code>，同时也会将当前的<code>Watcher</code>加入到<code>ChildOb</code>的<code>subs</code>中</li>\n<li>劫持setter后，当新的值过来时，执行<code>Dep</code>对象的notify，通知<code>Watcher</code>更新，调用<code>update</code>方法</li>\n<li>如果set的值是对象或者数组会对它执行observe操作，生成新的<code>ChildOb</code>并更新闭包中旧的<code>ChildOb</code></li>\n<li>上面提到的<code>Dep</code>和<code>ChildOb</code>都是处于getter/setter相对于defineReactive的闭包里的</li>\n</ul>\n<h3 id="watcher">Watcher</h3>\n<p><code>Watcher</code>是数据的订阅方，来源有三个地方：render, computed, watch($watch)，相应的watcher也就分成三种，<code>Watcher</code>对象包含以下主要的内容：</p>\n<ul>\n<li>vm 组件实例对象</li>\n<li>expression 获取数据的方法，如computed的回调，watch的表达式或者方法，更新视图的方法</li>\n<li>cb 变化时的回调方法，对于watch来讲它是有回调的</li>\n<li>deps,depIds,newDeps,newDepIds 订阅的<code>Dep</code>列表，因为依赖会根据计算更新，所以每次都要更新新的依赖列表，id用来避免自己被重复加到<code>Dep</code>中去</li>\n<li>deep, lazy, sync, dirty, active</li>\n<li>getter 获取数据的方法，就是上面的expression</li>\n<li>value 当前的值，用于watch方法</li>\n</ul>\n<p><code>Watcher</code>会提供<code>update</code>方法，也就是当数据变化时会被调用，有三种情况：</p>\n<ul>\n<li>对于computed-watcher来讲，是被动触发的过程，当访问到computed属性才会计算，那当computed依赖的属性发生了变化，computed-watcher会在computed-getter那里标记数据已经变脏，这样computed就会重新计算而不会使用缓存值了</li>\n<li>对于render-watcher来讲，渲染是异步的，这时<code>Watcher</code>会被加入到全局的待执行的watcher列表中，等待渲染调度<code>nextTick</code>执行，执行的时候会调用<code>getter</code>方法也就更新了组件的视图</li>\n<li>对于同步的watcher来讲会直接调用<code>getter</code>获取新的value，在调用getter期间，当前的<code>Watcher</code>会被推入一个全局的栈内，并且更新到<code>Dep.target</code>，执行的期间会触发数据的getter劫持，<code>Dep</code>就会得到订阅。执行完之后出栈并更新新的<code>deps</code>列表</li>\n</ul>\n<p><img src="https://cn.vuejs.org/images/data.png" alt="alt"></p>\n';
